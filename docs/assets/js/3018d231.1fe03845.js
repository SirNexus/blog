"use strict";(self.webpackChunkaidan_blog=self.webpackChunkaidan_blog||[]).push([[671],{1958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var i=n(3766),r=n(4848),o=n(8453);const l={slug:"kind-multi-cluster-flat-network",title:"Networking Multiple Kind Kubernetes Clusters Together Using Native Routing",authors:"aidancarson",tags:["Kind","Kubernetes","Networking","Pod","Linux"],toc_min_heading_level:2,toc_max_heading_level:5},s=void 0,a={authorsImageUrls:[void 0]},u=[{value:"The Challenge",id:"the-challenge",level:2}];function d(e){const t={h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Recently, I set out to create a multi-cluster kind environment where clusters could communicate over a flat network.\nThe goal was simple: pods in one cluster should be able to directly talk to pods in another cluster without requiring tunneling or proxies."}),"\n",(0,r.jsx)(t.p,{children:"At first glance, this seemed tricky \u2014 the pod IPs assigned inside kind clusters exist only within the containerized\nnetwork of each cluster, and Docker isolates these networks by default. However, I eventually found a straightforward\nsolution that uses native routing, and I wanted to share my journey and what worked."}),"\n",(0,r.jsx)(t.h2,{id:"the-challenge",children:"The Challenge"}),"\n",(0,r.jsx)(t.p,{children:"By design, kind runs Kubernetes clusters inside Docker containers. This means:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Pod IPs are only visible inside the Docker network created for each kind cluster."}),"\n",(0,r.jsx)(t.li,{children:"There\u2019s no built-in way for a pod in one cluster to directly communicate with a pod in another cluster using its pod IP."}),"\n",(0,r.jsx)(t.li,{children:"Bridging these isolated networks requires either complex overlay solutions or manual routing."}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3766:e=>{e.exports=JSON.parse('{"permalink":"/blog/kind-multi-cluster-flat-network","source":"@site/blog/2025-06-13-kind-multi-cluster-flat-network.md","title":"Networking Multiple Kind Kubernetes Clusters Together Using Native Routing","description":"Recently, I set out to create a multi-cluster kind environment where clusters could communicate over a flat network.","date":"2025-06-13T00:00:00.000Z","tags":[{"inline":true,"label":"Kind","permalink":"/blog/tags/kind"},{"inline":true,"label":"Kubernetes","permalink":"/blog/tags/kubernetes"},{"inline":true,"label":"Networking","permalink":"/blog/tags/networking"},{"inline":true,"label":"Pod","permalink":"/blog/tags/pod"},{"inline":true,"label":"Linux","permalink":"/blog/tags/linux"}],"readingTime":2.87,"hasTruncateMarker":true,"authors":[{"name":"Aidan Carson","key":"aidancarson","page":null}],"frontMatter":{"slug":"kind-multi-cluster-flat-network","title":"Networking Multiple Kind Kubernetes Clusters Together Using Native Routing","authors":"aidancarson","tags":["Kind","Kubernetes","Networking","Pod","Linux"],"toc_min_heading_level":2,"toc_max_heading_level":5},"unlisted":false,"nextItem":{"title":"Enabling pod to pod mTLS in Istio","permalink":"/blog/istio-pod-to-pod-mtls"}}')},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var i=n(6540);const r={},o=i.createContext(r);function l(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);